#装饰器什么时候进行装饰
'''
从上往下调用，从下往上装饰
'''

def w1(func):
    print ("-----正在装饰-----")
    def inner():
        print("-----正在验证权限-----")
        func()      #此处相当于闭包，只是在此处扩展为：“传入另一个函数的引用”

    return inner

def w2(func):
    print ("-----正在装饰2-----")
    def inner():
        print("-----正在验证权限2-----")
        func()      #此处相当于闭包，只是在此处扩展为：“传入另一个函数的引用”

    return inner

#只要python解释器执行到了这个代码，那么就会自动进行装饰，而不是等到调用的时候才装饰
@w1 #等价于f1 = w1(f1)，这句话相当于已经让程序开始执行，不像以前那样不调用就不执行
@w2
def f1():
    print("-----f1-----")

f1()    #在调用f1之前，已经进行装饰了

'''
结果：没有调用函数已经开始执行
-----正在装饰-----
'''